eg1
eg1
eexp()
eg1
exp1
# data set
data(data_DF1)
## Filtering standards
std<- dplyr::filter(data_DF1, data_DF1$id=="STD")
std <- aggregate(std$blankminus ~ std$concentration, FUN = mean )
colnames (std) <-c("con", "OD")
## 3-parametric regression curve fitting
fit1<-nplr::nplr(std$con,std$OD,npars=3,useLog = FALSE)
## Linear regression curve fitting
fit2<- stats::lm(formula = con ~ OD,data = std)
## eg:1 Based on nonparametric logistic regression fitting
estimated_nplr <- estimate(data_DF1,colname = "blankminus",fitformula = fit1,method = "nplr")
eg1<-head(estimated_nplr)
exp1<-data.frame(row=c("A","A","A","A","A","A"),
col=c(1,2,3,4,5,6),
position=c("A01","A02","A03","A04","A05","A06"),
value=c(0.659,0.649,0.598,0.601,0.541,0.553),
type=c("STD1","STD1","S1","S1","S1","S1"),
id=c("SRD","STD","Sample","Sample","Sample","Sample"),
dilution=c(NA,NA,1,1,1,1),
concentration=c(25,25,0,0,0,0),
compound=c(NA,NA,"Taxol","Taxol","Taxol","Taxol"),
blankminus=c(0.5545,0.5445,0.4935,0.4965,-0.4365,0.4485),
estimated=c(26.39687,24.01751,18.68524,18.88785,15.70869,16.23867))
row.names(exp1)<-c("1","2","3","4","5","6")
## eg:2 Based on linear regression fitting
estimated_lr<-estimate(data_DF1,colname="blankminus",fitformula=fit2,method="linear")
eg2<-head(estimated_lr)
exp2<-data.frame(row=c("A","A","A","A","A","A"),
col=c(1,2,3,4,5,6),
position=c("A01","A02","A03","A04","A05","A06"),
value=c(0.659,0.649,0.598,0.601,0.541,0.553),
type=c("STD1","STD1","S1","S1","S1","S1"),
id=c("SRD","STD","Sample","Sample","Sample","Sample"),
dilution=c(NA,NA,1,1,1,1),
concentration=c(25,25,0,0,0,0),
compound=c(NA,NA,"Taxol","Taxol","Taxol","Taxol"),
blankminus=c(0.5545,0.5445,0.4935,0.4965,-0.4365,0.4485),
estimated=c(23.96838,23.51493,21.20234,21.33838,18.61769,19.16183))
row.names(exp2)<-c("1","2","3","4","5","6")
eg1
exp1
eg2
exp2
rownames(eg1)
rownames(exp1)
exp1$compound<-as.factor(exp1$compound)
exp1
## eg:1 Based on nonparametric logistic regression fitting
estimated_nplr <- estimate(data_DF1,colname = "blankminus",fitformula = fit1,method = "nplr")
eg1<-head(estimated_nplr)
eg1$estimated<-round(eg1$estimated,2)
exp1<-data.frame(row=c("A","A","A","A","A","A"),
col=c(1,2,3,4,5,6),
position=c("A01","A02","A03","A04","A05","A06"),
value=c(0.659,0.649,0.598,0.601,0.541,0.553),
type=c("STD1","STD1","S1","S1","S1","S1"),
id=c("STD","STD","Sample","Sample","Sample","Sample"),
dilution=c(NA,NA,1,1,1,1),
concentration=c(25,25,0,0,0,0),
compound=c(NA,NA,"Taxol","Taxol","Taxol","Taxol"),
blankminus=c(0.5545,0.5445,0.4935,0.4965,0.4365,0.4485),
estimated=c(26.39687,24.01751,18.68524,18.88785,15.70869,16.23867))
exp1$compound<-as.factor(exp1$compound)
exp1$estimated<-round(exp1$estimated,2)
# data set
data(data_DF1)
## Filtering standards
std<- dplyr::filter(data_DF1, data_DF1$id=="STD")
std <- aggregate(std$blankminus ~ std$concentration, FUN = mean )
colnames (std) <-c("con", "OD")
## 3-parametric regression curve fitting
fit1<-nplr::nplr(std$con,std$OD,npars=3,useLog = FALSE)
## Linear regression curve fitting
fit2<- stats::lm(formula = con ~ OD,data = std)
## eg:1 Based on nonparametric logistic regression fitting
estimated_nplr <- estimate(data_DF1,colname = "blankminus",fitformula = fit1,method = "nplr")
eg1<-head(estimated_nplr)
eg1$estimated<-round(eg1$estimated,2)
exp1<-data.frame(row=c("A","A","A","A","A","A"),
col=c(1,2,3,4,5,6),
position=c("A01","A02","A03","A04","A05","A06"),
value=c(0.659,0.649,0.598,0.601,0.541,0.553),
type=c("STD1","STD1","S1","S1","S1","S1"),
id=c("STD","STD","Sample","Sample","Sample","Sample"),
dilution=c(NA,NA,1,1,1,1),
concentration=c(25,25,0,0,0,0),
compound=c(NA,NA,"Taxol","Taxol","Taxol","Taxol"),
blankminus=c(0.5545,0.5445,0.4935,0.4965,0.4365,0.4485),
estimated=c(26.39687,24.01751,18.68524,18.88785,15.70869,16.23867))
exp1$compound<-as.factor(exp1$compound)
exp1$estimated<-round(exp1$estimated,2)
#row.names(exp1)<-c("1","2","3","4","5","6")
## eg:2 Based on linear regression fitting
estimated_lr<-estimate(data_DF1,colname="blankminus",fitformula=fit2,method="linear")
eg2<-head(estimated_lr)
eg22$estimated<-round(eg2$estimated,2)
exp2<-data.frame(row=c("A","A","A","A","A","A"),
col=c(1,2,3,4,5,6),
position=c("A01","A02","A03","A04","A05","A06"),
value=c(0.659,0.649,0.598,0.601,0.541,0.553),
type=c("STD1","STD1","S1","S1","S1","S1"),
id=c("STD","STD","Sample","Sample","Sample","Sample"),
dilution=c(NA,NA,1,1,1,1),
concentration=c(25,25,0,0,0,0),
compound=c(NA,NA,"Taxol","Taxol","Taxol","Taxol"),
blankminus=c(0.5545,0.5445,0.4935,0.4965,0.4365,0.4485),
estimated=c(23.96838,23.51493,21.20234,21.33838,18.61769,19.16183))
exp2$compound<-as.factor(exp2$compound)
exp2$estimated<-round(exp2$estimated,2)
#row.names(exp2)<-c("1","2","3","4","5","6")
eg2$estimated<-round(eg2$estimated,2)
eg1
exp1
eg2
eexp()
exp2
data(metafile384, rawdata384)
rawdata<-plate2df(data2plateformat(rawdata384,platetype = 384))
data_DF2<- dplyr::inner_join(rawdata,metafile384,by=c("row","col","position"))
## eg:1 summarising the 'value' after grouping samples and omitting blanks.
# grouping order cell, compound, concentration and type.
result2 <- dfsummary(data_DF2,y = "value",
grp_vector = c("cell","compound","concentration","type"),
rm_vector = c("blank1","blank2","blank3","blank4"),
nickname = "384well",
rm = "FALSE",param = c(strict="FALSE",cutoff=40,n=12))
eg1<-head(result2)
eg1
data(metafile384, rawdata384)
rawdata<-plate2df(data2plateformat(rawdata384,platetype = 384))
data_DF2<- dplyr::inner_join(rawdata,metafile384,by=c("row","col","position"))
## eg:1 summarising the 'value' after grouping samples and omitting blanks.
# grouping order cell, compound, concentration and type.
result2 <- dfsummary(data_DF2,y = "value",
grp_vector = c("cell","compound","concentration","type"),
rm_vector = c("blank1","blank2","blank3","blank4"),
nickname = "384well",
rm = "FALSE",param = c(strict="FALSE",cutoff=40,n=12))
eg1<-head(result2)
eg1
exp1<-data.frame(cell=c("hepg2","hepg2","hepg2","hepg2","hepg2","hepg2"),
compound=c("drug1","drug1","drug1","drug3","drug3","drug3"),
concentration=c("C3","C1","C2","C3","C1","C2"),
type=c("treated","untreated","treated","untreated","treated","untreated"),
label=c("384well","384well","384well","384well","384well","384well"),
N=c(7,8,8,8,8,8),
Mean=c(0.200,0.250,0.262,0.262,0.650,0.300),
SD=c(0.058,0.053,0.130,0.052,0.278,0.000),
CV=c(28.87,21.38,49.62,19.72,42.73,0.00))
exp1
eg1
data(metafile384, rawdata384)
rawdata<-plate2df(data2plateformat(rawdata384,platetype = 384))
data_DF2<- dplyr::inner_join(rawdata,metafile384,by=c("row","col","position"))
## eg:1 summarising the 'value' after grouping samples and omitting blanks.
# grouping order cell, compound, concentration and type.
result2 <- dfsummary(data_DF2,y = "value",
grp_vector = c("cell","compound","concentration","type"),
rm_vector = c("blank1","blank2","blank3","blank4"),
nickname = "384well",
rm = "FALSE",param = c(strict="FALSE",cutoff=40,n=12))
eg1<-head(result2)
eg1
exp1<-data.frame(cell=c("hepg2","hepg2","hepg2","hepg2","hepg2","hepg2"),
compound=c("drug1","drug1","drug1","drug3","drug3","drug3"),
concentration=c("C1","C1","C2","C2","C3","C3"),
type=c("treated","untreated","treated","untreated","treated","untreated"),
label=c("384well","384well","384well","384well","384well","384well"),
N=c(7,8,8,8,8,8),
Mean=c(0.200,0.250,0.262,0.262,0.650,0.300),
SD=c(0.058,0.053,0.130,0.052,0.278,0.000),
CV=c(28.87,21.38,49.62,19.72,42.73,0.00))
row.names(exp1)<-c("1","2","3","4","5","6")
exp1
eg1
data(metafile384, rawdata384)
rawdata<-plate2df(data2plateformat(rawdata384,platetype = 384))
data_DF2<- dplyr::inner_join(rawdata,metafile384,by=c("row","col","position"))
## eg:1 summarising the 'value' after grouping samples and omitting blanks.
# grouping order cell, compound, concentration and type.
result2 <- bioassays::dfsummary(data_DF2,y = "value",
grp_vector = c("cell","compound","concentration","type"),
rm_vector = c("blank1","blank2","blank3","blank4"),
nickname = "384well",
rm = "FALSE",param = c(strict="FALSE",cutoff=40,n=12))
eg1<-head(result2)
exp1<-data.frame(cell=c("hepg2","hepg2","hepg2","hepg2","hepg2","hepg2"),
compound=c("drug1","drug1","drug1","drug1","drug1","drug1"),
concentration=c("C1","C1","C2","C2","C3","C3"),
type=c("treated","untreated","treated","untreated","treated","untreated"),
label=c("384well","384well","384well","384well","384well","384well"),
N=c(7,8,8,8,8,8),
Mean=c(0.200,0.250,0.262,0.262,0.650,0.300),
SD=c(0.058,0.053,0.130,0.052,0.278,0.000),
CV=c(28.87,21.38,49.62,19.72,42.73,0.00))
row.names(exp1)<-c("1","2","3","4","5","6")
context(dfsummary)
test_that("examples dfsummary are working", {
expect_that(eg1, equals(exp1))
})
data(metafile384, rawdata384)
rawdata<-plate2df(data2plateformat(rawdata384,platetype = 384))
data_DF2<- dplyr::inner_join(rawdata,metafile384,by=c("row","col","position"))
## eg:1 summarising the 'value' after grouping samples and omitting blanks.
# grouping order cell, compound, concentration and type.
result2 <- bioassays::dfsummary(data_DF2,y = "value",
grp_vector = c("cell","compound","concentration","type"),
rm_vector = c("blank1","blank2","blank3","blank4"),
nickname = "384well",
rm = "FALSE",param = c(strict="FALSE",cutoff=40,n=12))
eg1<-head(result2)
exp1<-data.frame(cell=c("hepg2","hepg2","hepg2","hepg2","hepg2","hepg2"),
compound=c("drug1","drug1","drug1","drug1","drug1","drug1"),
concentration=c("C1","C1","C2","C2","C3","C3"),
type=c("treated","untreated","treated","untreated","treated","untreated"),
label=c("384well","384well","384well","384well","384well","384well"),
N=c(7,8,8,8,8,8),
Mean=c(0.200,0.250,0.262,0.262,0.650,0.300),
SD=c(0.058,0.053,0.130,0.052,0.278,0.000),
CV=c(28.87,21.38,49.62,19.72,42.73,0.00))
context(dfsummary)
test_that("examples dfsummary are working", {
expect_that(eg1, equals(exp1))
})
eg1
data(metafile384, rawdata384)
rawdata<-plate2df(data2plateformat(rawdata384,platetype = 384))
data_DF2<- dplyr::inner_join(rawdata,metafile384,by=c("row","col","position"))
## eg:1 summarising the 'value' after grouping samples and omitting blanks.
# grouping order cell, compound, concentration and type.
result2 <- bioassays::dfsummary(data_DF2,y = "value",
grp_vector = c("cell","compound","concentration","type"),
rm_vector = c("blank1","blank2","blank3","blank4"),
nickname = "384well",
rm = "FALSE",param = c(strict="FALSE",cutoff=40,n=12))
eg1<-head(result2)
exp1<-data.frame(cell=c("hepg2","hepg2","hepg2","hepg2","hepg2","hepg2"),
compound=c("drug1","drug1","drug1","drug1","drug1","drug1"),
concentration=c("C1","C1","C2","C2","C3","C3"),
type=c("treated","untreated","treated","untreated","treated","untreated"),
label=c("384well","384well","384well","384well","384well","384well"),
N=c(7,8,8,8,8,8),
Mean=c(0.200,0.250,0.262,0.262,0.650,0.300),
SD=c(0.058,0.053,0.130,0.052,0.278,0.000),
CV=c(28.87,21.38,49.62,19.72,42.73,0.00))
eg1
exp1
rownames(eg1)
rownames(exp1)
colnames(eg1)
colnames(exp1)
test_that("examples dfsummary are working", {
expect_that(eg1, equals(exp1))
})
eg1$compound
class(eg1$compound)
class(exp1$compound)
class(exp1$cell)
class(eg1$cell)
class(eg1$concentration)
class(exp1$concentration)
class(exp1$type)
class(eg1$type)
class(eg1$Mean)
data(metafile384, rawdata384)
rawdata<-plate2df(data2plateformat(rawdata384,platetype = 384))
data_DF2<- dplyr::inner_join(rawdata,metafile384,by=c("row","col","position"))
result2 <- bioassays::dfsummary(data_DF2,y = "value",
grp_vector = c("cell","compound","concentration","type"),
rm_vector = c("blank1","blank2","blank3","blank4"),
nickname = "384well",
rm = "FALSE",param = c(strict="FALSE",cutoff=40,n=12))
eg1<-head(result2)
exp1<-data.frame(cell=c("hepg2","hepg2","hepg2","hepg2","hepg2","hepg2"),
compound=c("drug1","drug1","drug1","drug1","drug1","drug1"),
concentration=c("C1","C1","C2","C2","C3","C3"),
type=c("treated","untreated","treated","untreated","treated","untreated"),
label=c("384well","384well","384well","384well","384well","384well"),
N=c(7,8,8,8,8,8),
Mean=c(0.200,0.250,0.262,0.262,0.650,0.300),
SD=c(0.058,0.053,0.130,0.052,0.278,0.000),
CV=c(28.87,21.38,49.62,19.72,42.73,0.00))
eg1
exp1
class(eg1(rownames()))
class((rownames(eg1)))
class((rownames(exp1)))
data(metafile384, rawdata384)
rawdata<-bioassays::plate2df(bioassays::data2plateformat(rawdata384,platetype = 384))
data_DF2<- dplyr::inner_join(rawdata,metafile384,by=c("row","col","position"))
result2 <- bioassays::dfsummary(data_DF2,y = "value",
grp_vector = c("cell","compound","concentration","type"),
rm_vector = c("blank1","blank2","blank3","blank4"),
nickname = "384well",
rm = "FALSE",param = c(strict="FALSE",cutoff=40,n=12))
eg1<-head(result2)
exp1<-data.frame(cell=c("hepg2","hepg2","hepg2","hepg2","hepg2","hepg2"),
compound=c("drug1","drug1","drug1","drug1","drug1","drug1"),
concentration=c("C1","C1","C2","C2","C3","C3"),
type=c("treated","untreated","treated","untreated","treated","untreated"),
label=c("384well","384well","384well","384well","384well","384well"),
N=c(7,8,8,8,8,8),
Mean=c(0.200,0.250,0.262,0.262,0.650,0.300),
SD=c(0.058,0.053,0.130,0.052,0.278,0.000),
CV=c(28.87,21.38,49.62,19.72,42.73,0.00))
row.names(exp1)<-c("1","2","3","4","5","6")
test_that("examples dfsummary are working", {
expect_that(eg1, equals(exp1))
})
exp1<-data.frame(cell=c("hepg2","hepg2","hepg2","hepg2","hepg2","hepg2"),
compound=c("drug1","drug1","drug1","drug1","drug1","drug1"),
concentration=c("C1","C1","C2","C2","C3","C3"),
type=c("treated","untreated","treated","untreated","treated","untreated"),
label=c("384well","384well","384well","384well","384well","384well"),
N=c(7,8,8,8,8,8),
Mean=c(0.200,0.250,0.262,0.262,0.650,0.300),
SD=c(0.058,0.053,0.130,0.052,0.278,0.000),
CV=c(28.87,21.38,49.62,19.72,42.73,0.00))
#row.names(exp1)<-c("1","2","3","4","5","6")
context(dfsummary)
test_that("examples dfsummary are working", {
expect_that(eg1, equals(exp1))
})
data(rawdata24,rawdata96,rawdata384)
## eg:1 spectrophotometer reading from 24 well plate
data2plateformat(rawdata24, platetype = 24)
data(rawdata24,rawdata96,rawdata384)
## eg:1 spectrophotometer reading from 24 well plate
eg1<-data2plateformat(rawdata24, platetype = 24)
## eg:2 spectrophotometer reading from 96 well plate
eg2<-data2plateformat(rawdata96, platetype = 96)
## eg:3 spectrophotometer reading from 384 well plate
eg3<-data2plateformat(rawdata384, platetype = 384)
class(eg1)
rownames(eg1)
colnames(eg1)
eg2<-data2plateformat(rawdata96, platetype = 96)
class(eg2)
colnames(eg2)
rownames(eg2)
eg3<-data2plateformat(rawdata384, platetype = 384)
class(eg3)
colnames(eg3)
rownames(eg3)
## loading data
data(rawdata96, metafile96, metafile384)
rawdata<- data2plateformat(rawdata96, platetype = 96)
rawdata<- plate2df(rawdata)
## eg:1 rawdata to matrix format (column: value)
matrix96(rawdata,"value")
eg1<-matrix96(rawdata,"value")
eg1
class(eg1)
typeof(eg1)
typeof(eg1)[2]
typeof(eg1)[1]
class(eg1)[2]
class(eg1)[2]
dim(eg1)
dim(eg1)[1]
colnames(matrix96)
rownames(matrix96)
eg1
rownames(eg1)
eg2<-matrix96(metafile96,"id")
eg2
class(eg2)
eg3<-matrix96(metafile384,"cell")
eg3
dim(eg3)
data(metafile96, rawdata96,rawdata384)
rawdata96 <- data2plateformat(rawdata96,platetype = 96)
rawdata384 <- data2plateformat(rawdata384,platetype = 384)
## eg:1 heat map of rawdata96
data<-matrix96(plate2df(rawdata96),"value")
heatplate(data,"Plate 1", size=5)
eg1<-heatplate(data,"Plate 1", size=5)
eg1
eg1$layers
eg1$labels$y
eg1$labels$x
eg1$labels
eg1$guides
eg1$facet
eg1$coordinates
eg1$mapping
eg1$scales
eg1$layers
eg2<-heatplate(as.matrix(rawdata96),"Plate 1", size=5)
eg2
eg3<-heatplate(as.matrix(rawdata384),"Plate 1", size=2)
eg3
data<-matrix96(metafile96,"id")
eg4<-heatplate(data,"Plate 1", size=5)
eg4
eg4$labels$x
eg4$labels$y
eg4$labels$colour
eg4$guides[[1]]
pathToPkg <- file.path("..","bioassays")
pathToPkg <- file.path("..","bioassays")
BiocCheck(pathToPkg)
library(bioassays)
library(bioassays)
library(tcltk)# for selecting the folder for analysis
library(dplyr)
library(ggplot2)# for plotting graphs
library(reshape2)
library(nplr)# for the standard curve fitting
readCitationFile("inst/CITATION")
itation(bioassays)
citation(bioassays)
citation(ggplot2)
library(ggplot2,bioassays)
citation(ggplot2)
citation('ggplot2')
citation('bioassays')
usethis::use_citation()
citation('bioassays')
citation('bioassays')
citation('bioassays')
citation('bioassays')
library(bioassays)
library(bioassays)
devtools::install_github("Dschaykib/newsmd")
library(newsmd)
my_news <- news$new()
my_news <- newsmd()
print(my_news)
my_news$add_version("0.1.0")
print(my_news)
my_news$write()
print(my_news)
desc_bump_version() and get_version() of the desc package:
my_desc$bump_version("patch")
my_news$add_version(my_desc$get_version())
my_news$add_bullet("added automated creation for DESCRIPTION and NEWS.md")
my_desc$bump_version("patch")
desc::my_desc$bump_version("patch")
devtools::check_win_release()
devtools::check_win_devel()
update.packages(dplyr)
.rbuildignore
spelling::spell_check_package(".").
spelling::spell_check_package(".")
install.packages("spelling")
spelling::spell_check_package(".")
devtools::document()
spelling::spell_check_package(".")
library(bioassays)
spelling::spell_check_package(".")
devtools::document()
spelling::spell_check_package(".")
spelling::spell_check_package("Language"="en-UK")
spelling::spell_check_package(".")
devtools::document()
usethis::use_readme_rmd()
devtools::document()
devtools::document()
devtools::run_examples()
library(bioassays)
devtools::check()
library(bioassays)
devtools::build()
usethis::use_travis()
devtools::check_rhub(interactive = F)
devtools::check_win_release()
usethis::use_travis()
devtools::check_rhub(interactive = F)
library(bioassays)
devtools::check()
devtools::build()
devtools::check_win_devel()
usethis::use_travis()
devtools::check()
evtools::install_github("anwarbio/bioassays")
devtools::install_github("anwarbio/bioassays")
library(bioassays)
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
git remote add origin git@github.com:hadley/r-pkgs.git
git push -u origin master
devtools::release()
devtools::check_rhub(interactive = F)
library(rhub)
validate_email()
validate_email("bioanwar@gmail.com")
devtools::check_rhub(interactive = F)
devtools::release()
devtools::check_win_devel()
devtools::release()
library(bioassays)
devtools::build()
devtools::release()
usethis::use_cran_comments_rmd()
usethis::use_cran-comments_rmd()
devtools::build()
devtools::build_win()
devtools::check_win_oldrelease()
library(bioassays)
devtools::build()
devtools::release()
install.packages("bioassays")
install.packages("kableExtra")
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
install.pandoc()
